Encryption and Decryption:
You'll need to implement encryption and decryption functions
 based on the chosen algorithm (AES, RSA, etc.), including key management.

Networking:
In the pseudocode above, I used Python's socket library for TCP connections. 
Depending on your application needs, you might opt for a higher-level HTTP-based approach, WebSocket, or other protocol.

Running the Demonstration:
To demonstrate the application, you would run the server code on one machine 
and the client code on another. The client would attempt to send a file to the server,
 which would then verify the integrity of the received file using the Merkle root.

This is a simplified version to get you started. Real-world applications should include proper error handling, 
concurrency management, a secure key exchange mechanism, and thorough testing.